@page "/day08"
@rendermode InteractiveServer
@inherits DayBase<Day08, (string Instructions, Dictionary<string, Day08.Node> Nodes)>

<PageTitle>Day 08</PageTitle>

<h1>Day 08</h1>
<h3>Input</h3>
<textarea @oninput="HandleInputChange" rows="10">@InputData</textarea>

<h3>Part 1</h3>
<button class="btn btn-primary" @onclick="RunPart1">Calculate</button>
<p>Result: @Result1</p>

<h3>Part 2</h3>
<button class="btn btn-primary" @onclick="RunPart2">Calculate</button>
<p>Result: @Result2</p>

<h3>Banchmark</h3>
<button class="btn btn-primary" @onclick="RunBenchmark">Calculate</button>
<p>Parse (first): @ParseFirst.TotalMilliseconds ms</p>
<p>Parse (average of 10 000): @ParseAverage.TotalMilliseconds ms</p>
<p>Part 1 (first): @Part1First.TotalMilliseconds ms</p>
<p>Part 1 (average of 10 000): @Part1Average.TotalMilliseconds ms</p>
<p>Part 2 (first): @Part2First.TotalMilliseconds ms</p>
<p>Part 2 (average of 10 000): @Part2Average.TotalMilliseconds ms</p>


@code {

    protected override long GetResult1((string Instructions, Dictionary<string, Node> Nodes) input)
    {
        return RunInstructions(input, "AAA", node => node == "ZZZ");
    }

    protected override long GetResult2((string Instructions, Dictionary<string, Node> Nodes) input)
    {
        return input.Nodes.Values
            .Where(node => node.Id[2] == 'A')
            .Select(node => RunInstructions(input, node.Id, x => x[2] == 'Z'))
            .Aggregate((a, b) => a * b / Gcd(a, b));
    }

    private long RunInstructions((string Instructions, Dictionary<string, Node> Nodes) input, string startNode, Func<string, bool> successCondition)
    {
        var queue = new Queue<char>(input.Instructions);
        var current = startNode;
        var count = 0;

        while (queue.Count > 0)
        {
            var instruction = queue.Dequeue();
            current = instruction switch
            {
                'L' => input.Nodes[current].Left,
                _ => input.Nodes[current].Right,
            };
            count++;

            if (successCondition(current))
            {
                break;
            }

            if (queue.Count == 0)
            {
                queue.EnqueueRange(input.Instructions);
            }
        }

        return count;
    }

    private long Gcd(long a, long b)
    {
        if (b == 0)
            return a;
        return Gcd(b, a % b);
    }

    protected override (string Instructions, Dictionary<string, Node> Nodes) ParseInput()
    {
        var lines = InputData.GetLines();
        var instructions = lines.First();

        var nodes = lines
            .Skip(1)
            .Select(line => new Node(line.Substring(0, 3), line.Substring(7, 3), line.Substring(12, 3)))
            .ToDictionary(node => node.Id, node => node);

        return (instructions, nodes);
    }

    public record struct Node(string Id, string Left, string Right);
}
