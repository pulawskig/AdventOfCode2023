@page "/day04"
@rendermode InteractiveServer
@inherits DayBase<Day04, Day04.Card[]>

<PageTitle>Day 04</PageTitle>

<h1>Day 04</h1>
<h3>Input</h3>
<textarea @oninput="HandleInputChange" rows="10">@InputData</textarea>

<h3>Part 1</h3>
<button class="btn btn-primary" @onclick="RunPart1">Calculate</button>
<p>Result: @Result1</p>

<h3>Part 2</h3>
<button class="btn btn-primary" @onclick="RunPart2">Calculate</button>
<p>Result: @Result2</p>

<h3>Banchmark</h3>
<button class="btn btn-primary" @onclick="RunBenchmark">Calculate</button>
<p>Parse (first): @ParseFirst.TotalMicroseconds us</p>
<p>Parse (average of 10 000): @ParseAverage.TotalMicroseconds us</p>
<p>Part 1 (first): @Part1First.TotalMicroseconds us</p>
<p>Part 1 (average of 10 000): @Part1Average.TotalMicroseconds us</p>
<p>Part 2 (first): @Part2First.TotalMicroseconds us</p>
<p>Part 2 (average of 10 000): @Part2Average.TotalMicroseconds us</p>


@code {
    protected override long GetResult1(Card[] input)
    {
        return input
            .Select(card => card.Selected.Where(card.Winning.Contains).Count())
            .Select(count => count > 0 ? (long)Math.Pow(2, count - 1) : 0)
            .Sum();
    }

    protected override long GetResult2(Card[] input)
    {
        var queue = new Queue<Card>(input);
        var countMap = new Dictionary<int, int>();
        var count = 0L;
        while (queue.Count > 0)
        {
            var card = queue.Dequeue();
            count++;

            int winning;
            if (!countMap.TryGetValue(card.Number, out winning))
            {
                winning = card.Selected.Where(card.Winning.Contains).Count();
                countMap.Add(card.Number, winning);
            }

            for (var i = 0; i < winning; i++)
            {
                queue.Enqueue(input[card.Number + i]);
            }
        }
        return count;
    }

    protected override Card[] ParseInput()
    {
        return InputData
            .GetLines()
            .Select(line => line.Substring(10))
            .Select(line => line.Split('|'))
            .Select((split, i) => new Card(i + 1, split[0].Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray(), split[1].Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray()))
            .ToArray();
    }

    public record struct Card(int Number, int[] Winning, int[] Selected);
}
