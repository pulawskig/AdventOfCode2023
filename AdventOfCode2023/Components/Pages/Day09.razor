@page "/day09"
@rendermode InteractiveServer
@inherits DayBase<Day09, List<List<long>>>

<PageTitle>Day 09</PageTitle>

<h1>Day 09</h1>
<h3>Input</h3>
<textarea @oninput="HandleInputChange" rows="10">@InputData</textarea>

<h3>Part 1</h3>
<button class="btn btn-primary" @onclick="RunPart1">Calculate</button>
<p>Result: @Result1</p>

<h3>Part 2</h3>
<button class="btn btn-primary" @onclick="RunPart2">Calculate</button>
<p>Result: @Result2</p>

<h3>Banchmark</h3>
<button class="btn btn-primary" @onclick="RunBenchmark">Calculate</button>
<p>Parse (first): @ParseFirst.TotalMilliseconds ms</p>
<p>Parse (average of 10 000): @ParseAverage.TotalMilliseconds ms</p>
<p>Part 1 (first): @Part1First.TotalMilliseconds ms</p>
<p>Part 1 (average of 10 000): @Part1Average.TotalMilliseconds ms</p>
<p>Part 2 (first): @Part2First.TotalMilliseconds ms</p>
<p>Part 2 (average of 10 000): @Part2Average.TotalMilliseconds ms</p>


@code {
    protected override long GetResult1(List<List<long>> input)
    {
        var sum = 0L;

        foreach (var history in input)
        {
            var differences = FindDifferences(history);

            for (var i = differences.Count - 2; i >= 0; i--)
            {
                differences[i].Add(differences[i].Last() + differences[i + 1].Last());
            }

            sum += differences[0].Last();
        }

        return sum;
    }

    protected override long GetResult2(List<List<long>> input)
    {
        var sum = 0L;

        foreach (var history in input)
        {
            var differences = FindDifferences(history);

            for (var i = differences.Count - 2; i >= 0; i--)
            {
                differences[i].Insert(0, differences[i].First() - differences[i + 1].First());
            }

            sum += differences[0].First();
        }

        return sum;
    }

    private List<List<long>> FindDifferences(List<long> history)
    {
        var differences = new List<List<long>> { history };
        var current = history;

        while (current.Any(x => x != 0))
        {
            var newDiff = new List<long>();
            for (var i = 1; i < current.Count; i++)
            {
                newDiff.Add(current[i] - current[i - 1]);
            }
            differences.Add(newDiff);
            current = newDiff;
        }

        return differences;
    }

    protected override List<List<long>> ParseInput()
    {
        return InputData
            .GetLines()
            .Select(line => line
                .Split(' ')
                .Select(long.Parse)
                .ToList())
            .ToList();
    }
}
