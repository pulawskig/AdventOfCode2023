@page "/day09"
@rendermode InteractiveServer

<PageTitle>Day 09</PageTitle>

<h1>Day 09</h1>
<h3>Input</h3>
<textarea @oninput="HandleInputChange" rows="10">@InputData</textarea>

<h3>Part 1</h3>
<button class="btn btn-primary" @onclick="RunPart1">Calculate</button>
<p>Result: @Result1</p>

<h3>Part 2</h3>
<button class="btn btn-primary" @onclick="RunPart2">Calculate</button>
<p>Result: @Result2</p>

<h3>Banchmark</h3>
<button class="btn btn-primary" @onclick="RunBenchmark">Calculate</button>
<p>Parse (first): @ParseFirst.TotalMilliseconds ms</p>
<p>Parse (average of 10 000): @ParseAverage.TotalMilliseconds ms</p>
<p>Part 1 (first): @Part1First.TotalMilliseconds ms</p>
<p>Part 1 (average of 10 000): @Part1Average.TotalMilliseconds ms</p>
<p>Part 2 (first): @Part2First.TotalMilliseconds ms</p>
<p>Part 2 (average of 10 000): @Part2Average.TotalMilliseconds ms</p>


@code {
    public string InputData { get; set; } = string.Empty;
    public string DebugData { get; set; } = string.Empty;
    public long Result1 { get; set; } = 0;
    public long Result2 { get; set; } = 0;

    private TimeSpan ParseFirst { get; set; }
    private TimeSpan ParseAverage { get; set; }
    private TimeSpan Part1First { get; set; }
    private TimeSpan Part1Average { get; set; }
    private TimeSpan Part2First { get; set; }
    private TimeSpan Part2Average { get; set; }

    protected override async Task OnInitializedAsync()
    {
        InputData = await File.ReadAllTextAsync($"{Directory.GetCurrentDirectory()}{@"\wwwroot\input\day09.txt"}");
    }

    public void HandleInputChange(ChangeEventArgs args)
    {
        InputData = args.Value?.ToString() ?? string.Empty;
    }

    public void RunPart1()
    {
        var input = ParseInput();
        Result1 = GetResult1(input);
    }

    private long GetResult1(List<List<long>> input)
    {
        var sum = 0L;

        foreach (var history in input)
        {
            var differences = FindDifferences(history);

            for (var i = differences.Count - 2; i >= 0; i--)
            {
                differences[i].Add(differences[i].Last() + differences[i + 1].Last());
            }

            sum += differences[0].Last();
        }

        return sum;
    }

    public void RunPart2()
    {
        var input = ParseInput();
        Result2 = GetResult2(input);
    }

    private long GetResult2(List<List<long>> input)
    {
        var sum = 0L;

        foreach (var history in input)
        {
            var differences = FindDifferences(history);

            for (var i = differences.Count - 2; i >= 0; i--)
            {
                differences[i].Insert(0, differences[i].First() - differences[i + 1].First());
            }

            sum += differences[0].First();
        }

        return sum;
    }

    private List<List<long>> FindDifferences(List<long> history)
    {
        var differences = new List<List<long>> { history };
        var current = history;

        while (current.Any(x => x != 0))
        {
            var newDiff = new List<long>();
            for (var i = 1; i < current.Count; i++)
            {
                newDiff.Add(current[i] - current[i - 1]);
            }
            differences.Add(newDiff);
            current = newDiff;
        }

        return differences;
    }

    public void RunBenchmark()
    {
        var timestamp = Stopwatch.GetTimestamp();
        var input = ParseInput();
        ParseFirst = Stopwatch.GetElapsedTime(timestamp);

        var spans = new List<TimeSpan>();
        for (var i = 0; i < 10_000; i++)
        {
            timestamp = Stopwatch.GetTimestamp();
            ParseInput();
            spans.Add(Stopwatch.GetElapsedTime(timestamp));
        }
        ParseAverage = spans.AverageTime();

        timestamp = Stopwatch.GetTimestamp();
        GetResult1(input);
        Part1First = Stopwatch.GetElapsedTime(timestamp);

        spans.Clear();
        for (var i = 0; i < 10_000; i++)
        {
            timestamp = Stopwatch.GetTimestamp();
            GetResult1(input);
            spans.Add(Stopwatch.GetElapsedTime(timestamp));
        }
        Part1Average = spans.AverageTime();

        timestamp = Stopwatch.GetTimestamp();
        GetResult2(input);
        Part2First = Stopwatch.GetElapsedTime(timestamp);

        spans.Clear();
        for (var i = 0; i < 10_000; i++)
        {
            timestamp = Stopwatch.GetTimestamp();
            GetResult2(input);
            spans.Add(Stopwatch.GetElapsedTime(timestamp));
        }
        Part2Average = spans.AverageTime();
    }

    private List<List<long>> ParseInput()
    {
        return InputData
            .GetLines()
            .Select(line => line
                .Split(' ')
                .Select(long.Parse)
                .ToList())
            .ToList();
    }
}
