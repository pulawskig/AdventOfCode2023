@page "/day17"
@using Map = Dictionary<System.Numerics.Complex, int>;
@rendermode InteractiveServer
@inherits DayBase<Day17, int[][]>

<PageTitle>Day 17</PageTitle>

<h1>Day 17</h1>
<h3>Input</h3>
<textarea @oninput="HandleInputChange" rows="10">@InputData</textarea>

<h3>Part 1</h3>
<button class="btn btn-primary" @onclick="RunPart1">Calculate</button>
<p>Result: @Result1</p>

<h3>Part 2</h3>
<button class="btn btn-primary" @onclick="RunPart2">Calculate</button>
<p>Result: @Result2</p>

<h3>Banchmark</h3>
<button class="btn btn-primary" @onclick="RunBenchmark">Calculate</button>
<p>Parse (first): @ParseFirst.TotalMilliseconds ms</p>
<p>Parse (average of 10 000): @ParseAverage.TotalMilliseconds ms</p>
<p>Part 1 (first): @Part1First.TotalMilliseconds ms</p>
<p>Part 1 (average of 10 000): @Part1Average.TotalMilliseconds ms</p>
<p>Part 2 (first): @Part2First.TotalMilliseconds ms</p>
<p>Part 2 (average of 10 000): @Part2Average.TotalMilliseconds ms</p>


@code {
    protected override int[][] ParseInput()
    {
        return InputData
            .GetLines()
            .Select(line => line
                .Select(c => int.Parse(c.ToString()))
                .ToArray())
            .ToArray();
    }

    protected override long GetResult1(int[][] input)
    {
        return GetResult(input, path => path.StraightMoves < 3, _ => true);
    }

    protected override long GetResult2(int[][] input)
    {
        return GetResult(input, path => path.StraightMoves < 10, path => path.StraightMoves > 3);
    }

    private long GetResult(int[][] input, Func<CruciblePath, bool> goStraightPredicate, Func<CruciblePath, bool> changeDirectionPredicate)
    {
        var goal = new Vector2(input[0].Length - 1, input.Length - 1);
        var queue = new PriorityQueue<CruciblePath, int>();
        var seen = new HashSet<CruciblePath>();

        queue.Enqueue(new(new(0, 0), new(1, 0), 0), 0);
        queue.Enqueue(new(new(0, 0), new(0, 1), 0), 0);

        while (queue.TryDequeue(out var path, out var heatloss))
        {
            if (path.Position == goal && changeDirectionPredicate(path))
            {
                return heatloss;
            }

            foreach (var next in GetPossibleNext(path, goStraightPredicate, changeDirectionPredicate))
            {
                if (next.Position.X >= 0 && next.Position.X <= goal.X && next.Position.Y >= 0 && next.Position.Y <= goal.Y && !seen.Contains(next))
                {
                    seen.Add(next);
                    queue.Enqueue(next, heatloss + input[next.Position.Y][next.Position.X]);
                }
            }
        }

        return 0;
    }

    private IEnumerable<CruciblePath> GetPossibleNext(CruciblePath path, Func<CruciblePath, bool> goStraightPredicate, Func<CruciblePath, bool> changeDirectionPredicate)
    {
        if (goStraightPredicate(path))
        {
            yield return path with
            {
                Position = new(path.Position.X + path.Direction.X, path.Position.Y + path.Direction.Y),
                StraightMoves = path.StraightMoves + 1,
            };
        }

        if (changeDirectionPredicate(path))
        {
            var dir = new Vector2(-path.Direction.Y, path.Direction.X);
            yield return new(new(path.Position.X + dir.X, path.Position.Y + dir.Y), dir, 1);
            yield return new(new(path.Position.X - dir.X, path.Position.Y - dir.Y), new(-dir.X, -dir.Y), 1);
        }
    }

    public record struct Vector2(int X, int Y);
    public record struct CruciblePath(Vector2 Position, Vector2 Direction, int StraightMoves);
}