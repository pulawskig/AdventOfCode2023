@page "/day18"
@using System.Globalization
@using System.Numerics
@rendermode InteractiveServer
@inherits DayBase<Day18, Day18.Plan[], long, string>

<PageTitle>Day 18</PageTitle>

<h1>Day 18</h1>
<h3>Input</h3>
<textarea @oninput="HandleInputChange" rows="10">@InputData</textarea>

<h3>Part 1</h3>
<button class="btn btn-primary" @onclick="RunPart1">Calculate</button>
<p>Result: @Result1</p>

<h3>Part 2</h3>
<button class="btn btn-primary" @onclick="RunPart2">Calculate</button>
<p>Result: @Result2</p>

<h3>Banchmark</h3>
<button class="btn btn-primary" @onclick="RunBenchmark">Calculate</button>
<p>Parse (first): @ParseFirst.TotalMilliseconds ms</p>
<p>Parse (average of 10 000): @ParseAverage.TotalMilliseconds ms</p>
<p>Part 1 (first): @Part1First.TotalMilliseconds ms</p>
<p>Part 1 (average of 10 000): @Part1Average.TotalMilliseconds ms</p>
<p>Part 2 (first): @Part2First.TotalMilliseconds ms</p>
<p>Part 2 (average of 10 000): @Part2Average.TotalMilliseconds ms</p>


@code {
    private Regex parseRegex = new Regex(@"([UDRL]) (\d+) \(#([0-9a-f]{6})\)");

    protected override Plan[] ParseInput()
    {
        return InputData
            .ParseLines(parseRegex.Match)
            .Select(m => m.Groups)
            .Select(groups => (dir: char.Parse(groups[1].Value), count: long.Parse(groups[2].Value), color: groups[3].Value))
            .Select(x => new Plan(x.dir, x.count, x.color, x.color[5], long.Parse(x.color.Substring(0, 5), NumberStyles.HexNumber)))
            .ToArray();
    }

    protected override long GetResult1(Plan[] input)
    {
        return GetResult(input, Move, plan => plan.Count);
    }

    protected override string GetResult2(Plan[] input)
    {
        return GetResult(input, TrueMove, plan => plan.TrueCount).ToString();
    }

    private T GetResult<T>(Plan[] input, Func<Plan, (T X, T Y), (T X, T Y)> moveFunction, Func<Plan, T> selectCountFunction)
        where T : INumber<T>
    {
        var start = (X: T.Zero, Y: T.Zero);
        var current = start;
        var area = T.Zero;

        foreach (var plan in input)
        {
            var next = moveFunction(plan, current);
            area += (current.X * next.Y) - (next.X * current.Y);

            current = next;
        }

        area = T.Abs(area) / (T.One + T.One);

        var sum = input.Select(selectCountFunction).Aggregate((a, b) => a + b);
        return (sum / (T.One + T.One)) + area + T.One;
    }

    private (long X, long Y) Move(Plan plan, (long X, long Y) position)
    {
        return plan.Direction switch
        {
            'U' => (position.X, position.Y - plan.Count),
            'D' => (position.X, position.Y + plan.Count),
            'L' => (position.X - plan.Count, position.Y),
            'R' => (position.X + plan.Count, position.Y),
            _ => throw new NotImplementedException(),
        };
    }

    private (BigInteger X, BigInteger Y) TrueMove(Plan plan, (BigInteger X, BigInteger Y) position)
    {
        return plan.TrueDirection switch
        {
            '3' => (position.X, position.Y - plan.TrueCount),
            '1' => (position.X, position.Y + plan.TrueCount),
            '2' => (position.X - plan.TrueCount, position.Y),
            '0' => (position.X + plan.TrueCount, position.Y),
            _ => throw new NotImplementedException(),
        };
    }

    public record struct Plan(char Direction, long Count, string Color, char TrueDirection, BigInteger TrueCount);
}