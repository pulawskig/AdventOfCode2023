@page "/day06"
@rendermode InteractiveServer
@inherits DayBase<Day06, Day06.RaceSheet>

<PageTitle>Day 06</PageTitle>

<h1>Day 06</h1>
<h3>Input</h3>
<textarea @oninput="HandleInputChange" rows="10">@InputData</textarea>

<h3>Part 1</h3>
<button class="btn btn-primary" @onclick="RunPart1">Calculate</button>
<p>Result: @Result1</p>

<h3>Part 2</h3>
<button class="btn btn-primary" @onclick="RunPart2">Calculate</button>
<p>Result: @Result2</p>

<h3>Banchmark</h3>
<button class="btn btn-primary" @onclick="RunBenchmark">Calculate</button>
<p>Parse (first): @ParseFirst.TotalMilliseconds ms</p>
<p>Parse (average of 10 000): @ParseAverage.TotalMilliseconds ms</p>
<p>Part 1 (first): @Part1First.TotalMilliseconds ms</p>
<p>Part 1 (average of 10 000): @Part1Average.TotalMilliseconds ms</p>
<p>Part 2 (first): @Part2First.TotalMilliseconds ms</p>
<p>Part 2 (average of 10 000): @Part2Average.TotalMilliseconds ms</p>


@code {
    protected override long GetResult1(RaceSheet input)
    {
        var total = 1;
        foreach (var pair in input.MultipleRaces)
        {
            var found = 0;
            var lastDistance = -1;
            for (var i = 1; i <= pair.Time; i++)
            {
                var timeRemaining = pair.Time - i;
                var distanceDone = timeRemaining * i;
                if (distanceDone > pair.Distance)
                {
                    found++;
                    lastDistance = distanceDone;
                }
                else if (distanceDone < lastDistance)
                {
                    break;
                }
            }
            total *= found;
        }

        return total;

    }

    protected override long GetResult2(RaceSheet input)
    {
        var found = 0;
        var lastDistance = -1L;
        for (var i = 1; i <= input.SingleRace.Time; i++)
        {
            var timeRemaining = input.SingleRace.Time - i;
            var distanceDone = timeRemaining * i;
            if (distanceDone > input.SingleRace.Distance)
            {
                found++;
                lastDistance = distanceDone;
            }
            else if (distanceDone < lastDistance)
            {
                break;
            }
        }
        return found;
    }

    protected override RaceSheet ParseInput()
    {
        var lines = InputData.GetLines().Select(x => x.Substring(9)).ToArray();
        var times = lines[0].Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();
        var distances = lines[1].Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

        var multiple = times.Zip(distances, (time, distance) => (time, distance)).ToArray();

        var time = long.Parse(lines[0].Replace(" ", string.Empty));
        var distance = long.Parse(lines[1].Replace(" ", string.Empty));

        return new RaceSheet(multiple, (time, distance));
    }

    public record struct RaceSheet((int Time, int Distance)[] MultipleRaces, (long Time, long Distance) SingleRace);
}
